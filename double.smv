--yah yeet yeet yah
MODULE main
VAR
  entity_A : Entity_A(entity_B.msg_out);
  entity_B : Entity_B(entity_A.msg_out);

MODULE Entity_A(incoming_msg) --events
VAR
  state : {idle, hello_received, goodbye_received, ping_received, pong_received};
  msg_out : {none, hello, goodbye, ping, pong}; --actions
ASSIGN
  init(state) := idle;
  init(msg_out) := none;

  next(state) := case
    incoming_msg = hello : hello_received;
    incoming_msg = goodbye : goodbye_received;
    incoming_msg = ping : ping_received;
    incoming_msg = pong : pong_received;
    TRUE : idle;
  esac;

  next(msg_out) := case
    state = idle : {hello, goodbye, ping, pong};
    TRUE : none;
  esac;

MODULE Entity_B(incoming_msg)
VAR
  state : {idle, hello_received, goodbye_received, ping_received, pong_received};
  msg_out : {none, hello, goodbye, ping, pong};
ASSIGN
  init(state) := idle;
  init(msg_out) := none;

  next(state) := case
    incoming_msg = hello : hello_received;
    incoming_msg = goodbye : goodbye_received;
    incoming_msg = ping : ping_received;
    incoming_msg = pong : pong_received;
    TRUE : idle;
  esac;

  next(msg_out) := case
    state = idle : {hello, goodbye, ping, pong};
    TRUE : none;
  esac;
LTLSPEC G(state=hello -> F(state=goodbye));